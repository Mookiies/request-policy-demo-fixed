{"version":3,"sources":["components/Error.js","components/Loading.js","components/Todo.js","components/Todos.js","requestPolicyExchange.ts","App.js","reportWebVitals.js","index.js"],"names":["Error","props","children","displayName","Loading","Todo","id","complete","text","useMutation","RemoveTodo","mutation","executeMutation","onClick","className","fetching","Todos","useQuery","query","TodoQuery","res","todos","useMemo","data","error","message","map","todo","options","gql","storage","makeDefaultStorage","idbName","maxAge","cache","offlineExchange","client","createClient","url","exchanges","dedupExchange","ttl","shouldUpgrade","op","console","log","forward","operations","Map","TTL","processIncomingOperation","operation","kind","context","requestPolicy","Date","getTime","get","key","makeOperation","processIncomingResults","result","meta","cacheOutcome","set","ops$","pipe","tap","fetchExchange","App","useState","showTodos","setShowTodos","value","previousValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAEaA,EAAQ,SAAAC,GAAK,OACxB,qCACE,uCACA,qDACA,0CAAaA,EAAMC,gBAIvBF,EAAMG,YAAc,QCRb,IAAMC,EAAU,kBAAM,4CAE7BA,EAAQD,YAAc,UCDf,IAAME,EAAO,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAAW,EACVC,YAAYC,GADF,mBACvCC,EADuC,KAC7BC,EAD6B,KAK9C,OACE,qBAAIC,QAHe,kBAAMD,EAAgB,CAAEN,QAG3C,UACE,mBAAGQ,UAAWP,EAAW,gBAAkB,GAA3C,SAAgDC,IAC/CG,EAASI,UAAY,kDAK5BV,EAAKF,YAAc,OAEnB,I,EAAMO,EAAU,8E,gBCbHM,EAAQ,WAAO,IAAD,EACGC,YAAS,CAAEC,MAAOC,IADrB,mBAClBC,EADkB,KAGnBC,GAHmB,KAGXC,mBAAQ,WACpB,OAAIF,EAAIL,WAAaK,EAAIG,KAChB,cAAC,EAAD,IAGLH,EAAII,MACC,cAAC,EAAD,UAAQJ,EAAII,MAAMC,UAIzB,6BACGL,EAAIG,KAAKF,MAAMK,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,eAAwBA,GAAbA,EAAKrB,WAIrB,CAACc,KAEJ,OACE,qCACE,uCACCC,MAKPL,EAAMb,YAAc,QAEpB,ICrBsCyB,EDqBhCT,EAAYU,YAAH,sGEvBTC,EAAUC,YAAmB,CACjCC,QAAS,gBACTC,OAAQ,IAGJC,EAAQC,YAAgB,CAC5BL,YAGIM,EAASC,YAAa,CAC1BC,IAAK,wCACLC,UAAW,CACTC,KDVkCZ,ECWZ,CACpBa,IAAK,IACLC,cAAe,SAACC,GAEd,OADAC,QAAQC,IAAI,YAAaF,IAClB,IDfsD,YAEQ,IADLG,EACI,EADJA,QAEhEC,EAAa,IAAIC,IACjBC,GAAOrB,GAAW,IAAIa,KAXX,IAaXS,EAA2B,SAACC,GAChC,MACqB,UAAnBA,EAAUC,MAC2B,gBAApCD,EAAUE,QAAQC,eACmB,eAApCH,EAAUE,QAAQC,cAEbH,GAGW,IAAII,MAAOC,WACRT,EAAWU,IAAIN,EAAUO,MAAQ,GAEvBT,KAC7BrB,EAAQc,eAAiBd,EAAQc,cAAcS,IAE1CQ,YAAcR,EAAUC,KAAMD,EAAjB,YAAC,eAChBA,EAAUE,SADK,IAElBC,cAAe,uBAIZH,GAGHS,EAAyB,SAACC,GAC9B,IAAMC,EAAOD,EAAOV,UAAUE,QAAQS,OACtBA,GAA8B,SAAtBA,EAAKC,eAE3BhB,EAAWiB,IAAIH,EAAOV,UAAUO,KAAK,IAAIH,MAAOC,YAIpD,OAAO,SAAAS,GACL,OAAOC,YACLpB,EAAQoB,YAAKD,EAAMvC,YAAIwB,KACvBiB,YAAIP,OCvBN1B,EACAkC,KAEFd,cAAe,gBAmBFe,EAhBH,WAAO,IAAD,EACkBC,oBAAS,GAD3B,mBACTC,EADS,KACEC,EADF,KAMhB,OACE,cAAC,IAAD,CAAUC,MAAOrC,EAAjB,SACE,iCACE,wBAAQvB,QAPM,WAClB2D,GAAa,SAACE,GAAD,OAAoBA,MAM7B,0BACCH,EAAY,cAAC,EAAD,IAAY,WCrClBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c9709228.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Error = props => (\n  <>\n    <h4>Error</h4>\n    <p>Something went wrong</p>\n    <p>Message: {props.children}</p>\n  </>\n);\n\nError.displayName = \"Error\";\n","import React from \"react\";\n\nexport const Loading = () => <p>Loading...</p>;\n\nLoading.displayName = \"Loading\";\n","import React from \"react\";\nimport { useMutation } from \"urql\";\n\nexport const Todo = ({ id, complete, text }) => {\n  const [mutation, executeMutation] = useMutation(RemoveTodo);\n\n  const handleToggle = () => executeMutation({ id });\n\n  return (\n    <li onClick={handleToggle}>\n      <p className={complete ? \"strikethrough\" : \"\"}>{text}</p>\n      {mutation.fetching && <span>(updating)</span>}\n    </li>\n  );\n};\n\nTodo.displayName = \"Todo\";\n\nconst RemoveTodo = `\n  mutation($id: ID!) {\n    toggleTodo(id: $id) {\n      id\n    }\n  }\n`;\n","import React, { useCallback, useMemo } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"urql\";\nimport { Loading, Error, Todo } from \".\";\n\nexport const Todos = () => {\n  const [res, executeQuery] = useQuery({ query: TodoQuery });\n\n  const todos = useMemo(() => {\n    if (res.fetching || !res.data) {\n      return <Loading />;\n    }\n\n    if (res.error) {\n      return <Error>{res.error.message}</Error>;\n    }\n\n    return (\n      <ul>\n        {res.data.todos.map((todo) => (\n          <Todo key={todo.id} {...todo} />\n        ))}\n      </ul>\n    );\n  }, [res]);\n\n  return (\n    <>\n      <h1>Todos</h1>\n      {todos}\n    </>\n  );\n};\n\nTodos.displayName = \"Todos\";\n\nconst TodoQuery = gql`\n  query {\n    todos {\n      id\n      text\n      complete\n    }\n  }\n`;\n","import {\n  makeOperation,\n  Operation,\n  OperationResult,\n  Exchange,\n} from '@urql/core';\nimport { pipe, tap, map } from 'wonka';\n\nconst defaultTTL = 5 * 60 * 1000;\n\nexport interface Options {\n  shouldUpgrade?: (op: Operation) => boolean;\n  ttl?: number;\n}\n\nexport const requestPolicyExchange = (options: Options): Exchange => ({\n                                                                        forward,\n                                                                      }) => {\n  const operations = new Map();\n  const TTL = (options || {}).ttl || defaultTTL;\n\n  const processIncomingOperation = (operation: Operation): Operation => {\n    if (\n      operation.kind !== 'query' ||\n      (operation.context.requestPolicy !== 'cache-first' &&\n        operation.context.requestPolicy !== 'cache-only')\n    ) {\n      return operation;\n    }\n\n    const currentTime = new Date().getTime();\n    const lastOccurrence = operations.get(operation.key) || 0;\n    if (\n      currentTime - lastOccurrence > TTL &&\n      (!options.shouldUpgrade || options.shouldUpgrade(operation))\n    ) {\n      return makeOperation(operation.kind, operation, {\n        ...operation.context,\n        requestPolicy: 'cache-and-network',\n      });\n    }\n\n    return operation;\n  };\n\n  const processIncomingResults = (result: OperationResult): void => {\n    const meta = result.operation.context.meta;\n    const isMiss = !meta || meta.cacheOutcome === 'miss';\n    if (isMiss) {\n      operations.set(result.operation.key, new Date().getTime());\n    }\n  };\n\n  return ops$ => {\n    return pipe(\n      forward(pipe(ops$, map(processIncomingOperation))),\n      tap(processIncomingResults)\n    );\n  };\n};\n","import React, { useState } from \"react\";\nimport {\n  createClient,\n  dedupExchange,\n  fetchExchange,\n  Provider\n} from \"urql\";\n\nimport { requestPolicyExchange } from \"./requestPolicyExchange\";\nimport { offlineExchange } from \"@urql/exchange-graphcache\";\nimport { makeDefaultStorage } from \"@urql/exchange-graphcache/default-storage\";\nimport { Todos } from \"./components\";\n\nconst storage = makeDefaultStorage({\n  idbName: \"graphcache-v3\", // The name of the IndexedDB database\n  maxAge: 7 // The maximum age of the persisted data in days\n});\n\nconst cache = offlineExchange({\n  storage\n});\n\nconst client = createClient({\n  url: \"https://0ufyz-4000.sse.codesandbox.io\",\n  exchanges: [\n    dedupExchange,\n    requestPolicyExchange({\n      ttl: 5 * 1000,\n      shouldUpgrade: (op) => {\n        console.log('upgrading', op);\n        return true;\n      }\n    }),\n    cache,\n    fetchExchange\n  ],\n  requestPolicy: \"cache-first\"\n});\n\nconst App = () => {\n  const [showTodos, setShowTodos] = useState(false);\n  const toggleTodos = () => {\n    setShowTodos((previousValue) => !previousValue);\n  };\n\n  return (\n    <Provider value={client}>\n      <main>\n        <button onClick={toggleTodos}>Toggle todos</button>\n        {showTodos ? <Todos /> : null}\n      </main>\n    </Provider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}